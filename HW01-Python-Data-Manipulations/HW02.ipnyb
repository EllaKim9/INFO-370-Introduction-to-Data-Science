{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0bc55e2a-3b3a-4c27-84f2-bb522651f208",
   "metadata": {},
   "source": [
    "# Info 370 HW 01\n",
    "\n",
    "Name: Ella Kim\n",
    "\n",
    "## Computing\n",
    "### 1\n",
    "How many seconds are there in year?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e9fa4393-59b4-4cf0-a742-c86d8d9de964",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31536000\n"
     ]
    }
   ],
   "source": [
    "seconds_in_year = 60 * 60 * 24 * 365\n",
    "print(seconds_in_year)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d34257-ea23-442f-8d94-ed5136cda12a",
   "metadata": {},
   "source": [
    "### 2\n",
    "How many seconds is a typical human lifetime? Use the previously computed seconds in year.\n",
    "\n",
    "Credit: [looked up typical lifespan in Google](https://www.google.com/search?q=typical+human+lifespan&rlz=1C1CHBF_enUS871US871&oq=typial+himan+life&aqs=chrome.1.69i57j0i13j0i22i30l2j0i390l3.3328j0j1&sourceid=chrome&ie=UTF-8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b00de504-e10e-4108-80d7-4aee6bf0fdae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2491344000\n"
     ]
    }
   ],
   "source": [
    "seconds_in_livespan = 79 * seconds_in_year\n",
    "print(seconds_in_livespan)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "942ff01b-ed02-4513-8a67-b259549cb34a",
   "metadata": {},
   "source": [
    "### 3\n",
    "What is your age in seconds? Compute this based on your age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "31b0d605-f3db-422a-a42f-8d1e1c54ea28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "599184000\n"
     ]
    }
   ],
   "source": [
    "seconds_in_my_age = 19 * seconds_in_year\n",
    "print(seconds_in_my_age)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfd177fb-c70f-49ad-84d2-ee4e418fbe4e",
   "metadata": {},
   "source": [
    "### 4\n",
    "Create a logical variable that is true if you are more than 700M seconds old. Use logical operators,\n",
    "not if/else!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9f1e8cdf-c75c-4a2a-b6e6-9426cd8d65f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "older_than_700m = seconds_in_my_age > 7000000\n",
    "print(older_than_700m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1bd4017-8018-4fd9-94c2-c56336a3ce7d",
   "metadata": {},
   "source": [
    "## Lists\n",
    "### 1\n",
    "Create a list ‘movies‘ that contains the names of at least six movies you like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5fe97147-dab8-4887-ab10-3828028931fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies = [\"Harry Potter\", \"Frozen\", \"Pride and Prejudice\", \"Star Wars\", \"Lord of the Rings\", \"The Ice Age\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f742c4ec-3aa0-4f49-bd1a-4f3b7d104b1d",
   "metadata": {},
   "source": [
    "### 2\n",
    "Using indexing and slicing, Create a list of three first movies in the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "80a6d04e-a355-4976-ae6d-b57e8303110e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Harry Potter', 'Frozen', 'Pride and Prejudice']\n"
     ]
    }
   ],
   "source": [
    "first_three_movies = movies[0:3]\n",
    "print(first_three_movies)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1a27406-c228-4d3c-9a24-8b44c276b939",
   "metadata": {},
   "source": [
    "### 3\n",
    "Use slicing and list concatenation to create a list of the first two and the last two movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb770f2a-62d6-46c1-9cc6-aa9c11d40cf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Harry Potter', 'Frozen', 'Lord of the Rings', 'The Ice Age']\n"
     ]
    }
   ],
   "source": [
    "first_last_two_movies = movies[:2] + movies[-2:]\n",
    "print(first_last_two_movies)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "effef20f-fc75-45c1-8e6d-2f15370a6d2d",
   "metadata": {},
   "source": [
    "## Loops\n",
    "### 1\n",
    "Create a list ‘numbers‘ that is the numbers 70 through 79: in the following manner: create an empty\n",
    "list and add numbers to it in a loop (do not use list comprehension or ‘list‘ function here!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "041306c0-15c3-497e-bd8e-b663390598e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = []\n",
    "numbers = [i for i in range(70,80)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "797549ac-6b30-4060-b8da-31037fc28364",
   "metadata": {},
   "source": [
    "### 2\n",
    "Use a loop to compute the mean value of the list: add the values to their sum in a loop, and at the\n",
    "end divide the sum by the number of the values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "71a31688-9601-4725-89ca-87d3027e1d93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.5\n"
     ]
    }
   ],
   "source": [
    "sum_num = 0\n",
    "for n in range(0, len(numbers)):\n",
    "    sum_num += numbers[n]\n",
    "mean = sum_num / len(numbers)\n",
    "print(mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2edea531-8c8c-4c7d-9ff7-910f3824a8bb",
   "metadata": {},
   "source": [
    "### 3\n",
    "Use loop to compute sum of all numbers 1..100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e618e3f3-eee3-4497-bed6-64b2a5b7e28b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    }
   ],
   "source": [
    "sum_100 = 0\n",
    "for n in range(1,101):\n",
    "    sum_100 += n\n",
    "print(sum_100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa605697-48d9-43c9-8a84-d4771f6a5b8f",
   "metadata": {},
   "source": [
    "### 4\n",
    "Compute product of all numbers 1..100 (factorial, denoted by 100!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3e5eea90-8570-4109-9b8b-cc05db5a0ede",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n"
     ]
    }
   ],
   "source": [
    "prod_100 = 1\n",
    "for n in range(1,101):\n",
    "    prod_100 *= n\n",
    "print(prod_100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c99f416e-f76f-49a2-bb26-900631ef6020",
   "metadata": {},
   "source": [
    "### 5\n",
    "Assign people to seats. Consider names Adam, Ashin, Inukai, Tanaka, and Ikki; and seats 33, 12,\n",
    "45, 2 and 17. Print seat assignments by assigning each name to the corresponding seat. You coude\n",
    "should output  \n",
    "Adam: 33  \n",
    "Ashin: 12  \n",
    "...  \n",
    "Hint: loop over the integer range of the length of names, and use indexing to access the corresponding\n",
    "name and seat number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "44a02f02-b835-4954-8cb1-f3a06cb82daf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adam: 33\n",
      "Ashin: 12\n",
      "Inukai: 45\n",
      "Tanaka: 2\n",
      "Ikki: 17\n"
     ]
    }
   ],
   "source": [
    "assign_seat = []\n",
    "names = [\"Adam\", \"Ashin\", \"Inukai\", \"Tanaka\", \"Ikki\"]\n",
    "seats = [33, 12, 45, 2, 17]\n",
    "for n in range(0, len(names)):\n",
    "    print(names[n] + \": \" + str(seats[n]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96080c87-c98d-4db2-a48b-ccb2019e61d8",
   "metadata": {},
   "source": [
    "\n",
    "## Dicts and Sets\n",
    "### 1\n",
    "Create a word frequency table using dicts that take a looong string (feel free to copy-paste some text\n",
    "here), splits it into individual words, and counts the number of occurrencies of each word (and prints\n",
    "the result). Let’s ignore punctuation. Your code should run over individual words and increase the\n",
    "counter for that word, stored in a list. It has to check if a word exists in the dictionary, and if not,\n",
    "take an appropriate action.  \n",
    "Hint: use the split() method to get words: \"I have no clue\".split() -> [’I’, ’have’, ’no’,\n",
    "’clue’]  \n",
    "Hint 2: convert everything to lower case  \n",
    "Hint 3: use triple quotes \"\"\" to create long multi-line strings  \n",
    "Hint 4: proceed as you did with lists: first create an empty dict of word counts, thereafter loop over\n",
    "words, and increase the count for each word. But you have to handle the words that are not yet in\n",
    "the dict somehow.  \n",
    "\n",
    "Credit: [used for .get() function](https://thispointer.com/python-how-to-check-if-a-key-exists-in-dictionary/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2db78f02-2acb-460f-9c70-6b328de94df4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Create': 1, 'a': 4, 'word': 3, 'frequency': 1, 'table': 1, 'using': 1, 'dicts': 1, 'that': 2, 'take': 2, 'looong': 1, 'string': 1, '(feel': 1, 'free': 1, 'to': 2, 'copy-paste': 1, 'some': 1, 'texthere),': 1, 'splits': 1, 'it': 1, 'into': 1, 'individual': 2, 'words,': 1, 'and': 3, 'counts': 1, 'the': 2, 'number': 1, 'of': 2, 'occurrencies': 1, 'each': 1, '(and': 1, 'printsthe': 1, 'result).': 1, 'Let’s': 1, 'ignore': 1, 'punctuation.': 1, 'Your': 1, 'code': 1, 'should': 1, 'run': 1, 'over': 1, 'words': 1, 'increase': 1, 'thecounter': 1, 'for': 1, 'word,': 1, 'stored': 1, 'in': 2, 'list.': 1, 'It': 1, 'has': 1, 'check': 1, 'if': 2, 'exists': 1, 'dictionary,': 1, 'not,': 1, 'an': 1, 'appropriate': 1, 'action.': 1}\n"
     ]
    }
   ],
   "source": [
    "string = \"\"\"Create a word frequency table using dicts that take a looong string \n",
    "(feel free to copy-paste some texthere), splits it into individual words, and counts \n",
    "the number of occurrencies of each word (and printsthe result). Let’s ignore punctuation. \n",
    "Your code should run over individual words and increase thecounter for that word, stored \n",
    "in a list. It has to check if a word exists in the dictionary, and if not, take an \n",
    "appropriate action.\"\"\"\n",
    "# actual string would not have punctuation, as said in specs\n",
    "split_string = string.split()\n",
    "final_dict = {}\n",
    "for key in split_string:\n",
    "    if final_dict.get(key) is not None:\n",
    "        final_dict[key] += 1\n",
    "    else:\n",
    "        final_dict[key] = 1\n",
    "print(final_dict)\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "741c7db6-8e00-4d94-bdb4-e0a2c34de22b",
   "metadata": {},
   "source": [
    "### 2\n",
    "Use set to find how many different words you have in your text above.  \n",
    "Note: you can get this information from your word frequency dict too, but this task is about using\n",
    "set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "edb2fa4e-d7b3-49a4-8982-e6559e0b5bd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'individual', 'It', 'stored', 'over', 'number', 'printsthe', 'word', 'counts', 'each', 'and', 'should', 'an', 'Your', 'the', 'words,', 'result).', 'word,', 'has', 'check', 'thecounter', 'frequency', 'that', 'list.', 'not,', 'table', 'into', 'if', 'Create', 'dicts', 'it', 'occurrencies', 'string', 'action.', 'splits', 'of', 'copy-paste', 'take', 'a', 'for', 'appropriate', 'Let’s', 'code', 'some', 'exists', 'words', 'texthere),', 'run', 'to', 'dictionary,', 'ignore', 'increase', 'using', 'looong', 'free', '(feel', '(and', 'in', 'punctuation.'}\n",
      "58\n"
     ]
    }
   ],
   "source": [
    "different_words = set(final_dict)\n",
    "print(different_words)\n",
    "count = len(different_words)\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a798611b-81da-4c4b-8ee2-bc1f6f822c37",
   "metadata": {},
   "source": [
    "## Comprehensions\n",
    "### 1\n",
    "Use list comprehension to create a list of squares of numbers 1..10 (i.e. 1, 4, 9, ..., 100)\n",
    "\n",
    "Credit: [used for power/exponent](https://kodify.net/python/math/square/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1e888741-8012-488e-913e-776836fbb01e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
     ]
    }
   ],
   "source": [
    "list_squares = []\n",
    "for n in range(1,11):\n",
    "  list_squares.append(n ** 2)\n",
    "print(list_squares)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aa27a99-bed7-4234-9261-3c268887d329",
   "metadata": {},
   "source": [
    "### 2\n",
    "Use dict comprehension to create a dict of numbers 1..10 and their squares (i.3. 1:1, 2:4, ..., 10:100)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "79fd1411-1959-49d8-85ab-320142f82b48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\n"
     ]
    }
   ],
   "source": [
    "dict_squares = {}\n",
    "for n in range(1, 11):\n",
    "    dict_squares[n] = n ** 2\n",
    "print(dict_squares)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ac0e4e7-28dd-47e9-b2df-4eff0f9556f5",
   "metadata": {},
   "source": [
    "## Functions \n",
    "### 1 \n",
    "Write a function that takes in time in the numeric form of HHMM (hours-minutes), and returns it\n",
    "in the numeric form of HH.HH (hours + fractions of hours). For instance, 1015 →10.25 (10 hrs 15\n",
    "mins →10.25 hrs). Demonstrate it works using values 1015 and 345.  \n",
    "The function should return (not print) the result as a number.  \n",
    "Hint: use modulo operator % and integer division operator //. Modulo of 100 gives you minutes\n",
    "and integer division by 100 gives you hours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "87462799-51fd-4a3c-ade6-003e2222f641",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.25\n",
      "3.75\n"
     ]
    }
   ],
   "source": [
    "def hhmm_to_hhhh(hhmm):\n",
    "    hour = hhmm // 100\n",
    "    minute = hhmm % 100\n",
    "    fraction = minute / 60\n",
    "    hhhh = hour + fraction\n",
    "    return(hhhh)\n",
    "test_1015 = hhmm_to_hhhh(1015)\n",
    "print(test_1015)\n",
    "test_345 = hhmm_to_hhhh(345)\n",
    "print(test_345)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba634a35-3e3e-4ec7-9fe4-2fcf5c8ea6a9",
   "metadata": {},
   "source": [
    "## Duration to Complete\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6a77ac9-28f5-4ebb-bad9-3e37a1652d31",
   "metadata": {},
   "source": [
    "I did not keep track of the time very well, but I beleive it was about 2 hours"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64119673-8340-48cc-985c-ecb56d919693",
   "metadata": {},
   "source": [
    "## References\n",
    "Lubanovic, B. (2014) *Introducing Python: Modern Computing in Simple Packages*, O’Reilly Media."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
